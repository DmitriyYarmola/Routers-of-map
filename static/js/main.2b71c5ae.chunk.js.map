{"version":3,"sources":["Img/cross.svg","Components/Features/Errors/codes.ts","Components/Features/Errors/model/actions.ts","Components/Features/PointsManager/Model/actions.ts","services/API/key.ts","services/API/API.ts","Components/Features/PointsManager/Model/thunks.ts","Components/Features/PointsManager/SearchLocation/index.tsx","Components/Features/PointsManager/Points/Atoms/index.tsx","Components/Features/PointsManager/Points/Moleculs/index.tsx","Components/Features/PointsManager/Points/Templates/index.tsx","Components/lib/reorder/index.ts","Components/Features/SimpleMap/Model/actions.ts","Components/Features/SimpleMap/Organims/MapDirection/index.tsx","Components/lib/getDistance/index.ts","Components/Features/SimpleMap/Atoms/Marker/index.tsx","Components/lib/getCenterBetweenPoints/index.ts","Components/Features/SimpleMap/Templates/index.tsx","Components/UI/Atoms/Label/index.tsx","Components/Pages/Page.tsx","Components/lib/RandomNumber/index.ts","App.tsx","serviceWorker.ts","Components/Features/SimpleMap/Model/reducer.ts","Components/Features/PointsManager/Model/reducer.ts","Components/Features/Errors/model/reducer.ts","Components/Features/Store/store.ts","index.tsx"],"names":["module","exports","Codes","Actions","payload","type","id","API_KEY","PointAPI","location","axios","get","split","join","then","response","data","coordiante","lat","lng","SearchLocation","dispatch","useDispatch","className","onSelect","description","a","status","OK","ActionsPoints","results","NoRsult","ActionsError","Quote","quote","index","onDeletePoint","place_id","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","formatted_address","src","Cross","alt","onClick","QuoteList","React","memo","points","map","key","Points","useSelector","state","PointsReducer","console","log","onDragEnd","result","destination","source","quotes","list","startIndex","endIndex","Array","from","splice","removed","reorder","onDragStart","window","navigator","vibrate","droppableId","droppableProps","placeholder","MapDirection","places","travelMode","useState","coordinate","setCoordinate","disptach","useEffect","waypoints","p","geometry","stopover","origin","shift","pop","google","maps","DirectionsService","route","dis","sumDistance","forEach","point","Number","distance","value","Math","ceil","getDistance","routes","legs","coords","overview_path","ActionsErrors","path","options","strokeColor","strokeOpacity","strokeWeight","clickable","geodesic","Marker","position","marker","numberMarker","props","isOpen","setIsOpen","draggable","e","latLng","label","text","color","fontSize","fontWeight","getCenterBetweenPoints","markers","length","Map","compose","withProps","googleMapURL","loadingElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","geolocation","currentLocation","defaultCenter","defaultZoom","center","zoom","TravelMode","DRIVING","Label","Page","MapReducer","error","ErrorReducer","distanceBetweenPoints","currentPoint","onSetGeoloccation","useCallback","ActionsMap","getCurrentPosition","latitude","longitude","min","max","random","alert","message","App","Boolean","hostname","match","initialState","rootReducer","combineReducers","action","filter","item","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2b71c5ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross.e3380abb.svg\";","export enum Codes {\r\n\tOK = 'OK',\r\n\tNotFoundPage = 404,\r\n\tNoRsult = 'ZERO_RESULTS',\r\n}\r\n","import { InferActionsType } from '../../Store/store'\r\nexport const ERROR = 'ERROR'\r\n\r\nexport type ActionsType = InferActionsType<typeof Actions>\r\n\r\nexport const Actions = {\r\n\terror: (payload: string) =>\r\n\t\t({\r\n\t\t\ttype: ERROR,\r\n\t\t\tpayload,\r\n\t\t} as const),\r\n}\r\n","import { InferActionsType } from '../../Store/store'\r\nimport { LocationInfoType } from '../../../../services/API/API'\r\nexport const ADD_POINT = 'ADD_POINT'\r\nexport const DELETE_POINT = 'DELETE_POINT'\r\nexport const MOVED_POINTS = 'MOVED_POINTS'\r\nexport const CHANGED_POSITION_POINTS = 'CHANGED_POSITION_POINTS'\r\nexport type ActionsType = InferActionsType<typeof Actions>\r\n\r\nexport const Actions = {\r\n\taddPoint: (payload: LocationInfoType) =>\r\n\t\t({\r\n\t\t\ttype: ADD_POINT,\r\n\t\t\tpayload,\r\n\t\t} as const),\r\n\tdeletePoint: (payload: string) =>\r\n\t\t({\r\n\t\t\ttype: DELETE_POINT,\r\n\t\t\tpayload,\r\n\t\t} as const),\r\n\tmovePoints: (payload: LocationInfoType[]) =>\r\n\t\t({\r\n\t\t\ttype: MOVED_POINTS,\r\n\t\t\tpayload,\r\n\t\t} as const),\r\n\tchangePositionPoint: (payload: LocationInfoType, id: string) =>\r\n\t\t({\r\n\t\t\ttype: CHANGED_POSITION_POINTS,\r\n\t\t\tpayload,\r\n\t\t\tid,\r\n\t\t} as const),\r\n}\r\n","export const API_KEY = 'AIzaSyBrKOuFH3wbgwRkbQCx4p7jdzHgQvGPRZw'\r\n","import { API_KEY } from './key'\r\nimport axios from 'axios'\r\n\r\ntype GorizonteType = {\r\n\tnortheast: CoordinateType\r\n\tsouthwest: CoordinateType\r\n}\r\n\r\ntype GeometryType = {\r\n\tbounds: GorizonteType\r\n\tlocation: CoordinateType\r\n\tlocation_type: string\r\n\tviewport: GorizonteType\r\n}\r\n\r\ntype AddressComponents = {\r\n\tlong_name: string\r\n\tshort_name: string\r\n\ttypes: Array<string>\r\n}\r\n\r\ntype PlusCodeType = {\r\n\tcompound_code: string\r\n\tglobal_code: string\r\n}\r\n\r\nexport type CoordinateType = {\r\n\tlat: number\r\n\tlng: number\r\n}\r\n\r\nexport type LocationInfoType = {\r\n\taddress_components: Array<AddressComponents>\r\n\tformatted_address: string\r\n\tgeometry: GeometryType\r\n\tplace_id: string\r\n\ttypes: Array<string>\r\n}\r\n\r\nexport type GetCoordinateOfPoint = {\r\n\tplus_code?: PlusCodeType\r\n\tresults: LocationInfoType[]\r\n\tstatus: string\r\n}\r\n\r\nexport const PointAPI = {\r\n\tgetCoordinateOfPoint: (location: string) => {\r\n\t\treturn axios\r\n\t\t\t.get<GetCoordinateOfPoint>(\r\n\t\t\t\t`https://maps.googleapis.com/maps/api/geocode/json?address=${location\r\n\t\t\t\t\t.split(' ')\r\n\t\t\t\t\t.join('+')}&key=${API_KEY}`\r\n\t\t\t)\r\n\t\t\t.then((response) => response.data)\r\n\t},\r\n\tgetAddressOfPoint: (coordiante: CoordinateType) => {\r\n\t\treturn axios\r\n\t\t\t.get<GetCoordinateOfPoint>(\r\n\t\t\t\t`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coordiante.lat},${coordiante.lng}&key=${API_KEY}`\r\n\t\t\t)\r\n\t\t\t.then((response) => response.data)\r\n\t},\r\n}\r\n","import { CoordinateType } from './../../../../services/API/API'\r\nimport { ActionsType as ActionsTypeError } from './../../Errors/model/actions'\r\nimport { Actions as ActionsError } from './../../Errors/model/actions'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from '../../Store/store'\r\nimport { ActionsType as ActionsTypePoint, Actions as ActionsPoints } from './actions'\r\nimport { PointAPI } from '../../../../services/API/API'\r\nimport { Codes } from '../../Errors/codes'\r\n\r\ntype ThunkType = ThunkAction<\r\n\tPromise<void>,\r\n\tAppStateType,\r\n\tunknown,\r\n\tActionsTypePoint | ActionsTypeError\r\n>\r\n\r\nexport const getGeoLocOfPoint = (location: string): ThunkType => {\r\n\treturn async (dispatch) => {\r\n\t\tlet data = await PointAPI.getCoordinateOfPoint(location)\r\n\t\tif (data.status === Codes.OK) dispatch(ActionsPoints.addPoint(data.results[0]))\r\n\t\telse if (data.status === Codes.NoRsult)\r\n\t\t\tdispatch(ActionsError.error('The point was not found'))\r\n\t}\r\n}\r\n\r\nexport const getAddressOfPoint = (coordinate: CoordinateType, id: string): ThunkType => {\r\n\treturn async (dispatch) => {\r\n\t\tlet data = await PointAPI.getAddressOfPoint(coordinate)\r\n\t\tif (data.status === Codes.OK)\r\n\t\t\tdispatch(ActionsPoints.changePositionPoint(data.results[0], id))\r\n\t\telse if (data.status === Codes.NoRsult)\r\n\t\t\tdispatch(ActionsError.error('The point was not found'))\r\n\t\tconsole.log(data)\r\n\t}\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getGeoLocOfPoint } from '../Model/thunks'\r\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete'\r\nimport 'react-google-places-autocomplete/dist/index.min.css'\r\nimport './style.sass'\r\ntype AddressType = {\r\n\tdescription: string\r\n}\r\nexport const SearchLocation = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst onKeyPress = ({ description }: AddressType) => {\r\n\t\tdispatch(getGeoLocOfPoint(description))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='search-location'>\r\n\t\t\t<GooglePlacesAutocomplete onSelect={onKeyPress} />\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport { LocationInfoType } from '../../../../../services/API/API'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport Cross from './../../../../../Img/cross.svg'\r\nimport { Actions } from '../../Model/actions'\r\nimport { useDispatch } from 'react-redux'\r\nimport './style.sass'\r\n\r\ntype QuoteType = {\r\n\tquote: LocationInfoType\r\n\tindex: number\r\n}\r\n\r\nexport const Quote: React.FC<QuoteType> = ({ quote, index }) => {\r\n\tconst dispatch = useDispatch()\r\n\tconst onDeletePoint = () => {\r\n\t\tdispatch(Actions.deletePoint(quote.place_id))\r\n\t}\r\n\treturn (\r\n\t\t<Draggable draggableId={quote.place_id} index={index}>\r\n\t\t\t{(provided) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='quote'\r\n\t\t\t\t\tref={provided.innerRef}\r\n\t\t\t\t\t{...provided.draggableProps}\r\n\t\t\t\t\t{...provided.dragHandleProps}\r\n\t\t\t\t>\r\n\t\t\t\t\t{quote.formatted_address}\r\n\t\t\t\t\t<img src={Cross} alt='' className='cross' onClick={onDeletePoint} />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</Draggable>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport { LocationInfoType } from '../../../../../services/API/API'\r\nimport { Quote } from '../Atoms'\r\nimport './style.sass'\r\ntype QuoteListType = {\r\n\tpoints: LocationInfoType[]\r\n}\r\n\r\nexport const QuoteList: React.FC<QuoteListType> = React.memo(({ points }) => {\r\n\treturn (\r\n\t\t<div className='quote-list'>\r\n\t\t\t{points.map((quote: LocationInfoType, index: number) => (\r\n\t\t\t\t<Quote quote={quote} index={index} key={quote.place_id} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n})\r\n","import React from 'react'\r\nimport { Actions } from '../../Model/actions'\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport { AppStateType } from '../../../Store/store'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { QuoteList } from '../Moleculs'\r\nimport { reorder } from '../../../../lib/reorder'\r\n\r\nexport const Points = () => {\r\n\tconst points = useSelector((state: AppStateType) => state.PointsReducer.points)\r\n\tconsole.log(points)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst onDragStart = () => {\r\n\t\tif (window.navigator.vibrate) window.navigator.vibrate(100)\r\n\t}\r\n\r\n\tconst onDragEnd = (result: any) => {\r\n\t\tif (!result.destination) return\r\n\r\n\t\tif (result.destination.index === result.source.index) return\r\n\r\n\t\tconst quotes = reorder(points, result.source.index, result.destination.index)\r\n\r\n\t\tdispatch(Actions.movePoints(quotes))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\r\n\t\t\t<Droppable droppableId='list'>\r\n\t\t\t\t{(provided) => (\r\n\t\t\t\t\t<div ref={provided.innerRef} {...provided.droppableProps}>\r\n\t\t\t\t\t\t<QuoteList points={points} />\r\n\t\t\t\t\t\t{provided.placeholder}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</Droppable>\r\n\t\t</DragDropContext>\r\n\t)\r\n}\r\n","import { LocationInfoType } from \"../../../services/API/API\"\r\n\r\nexport const reorder = (\r\n\tlist: LocationInfoType[],\r\n\tstartIndex: number,\r\n\tendIndex: number\r\n) => {\r\n\tconst result = Array.from(list)\r\n\tconst [removed] = result.splice(startIndex, 1)\r\n\tresult.splice(endIndex, 0, removed)\r\n\r\n\treturn result\r\n}\r\n","import { InferActionsType } from '../../Store/store'\r\nimport { CoordinateType } from '../../../../services/API/API'\r\n\r\nexport const GET_GEOLOCATION = 'GET_GEOLOCATION'\r\nexport const DISPTANCE_BETWEEN_POINTS = 'DISPTANCE_BEETWEN_POINTS'\r\nexport type ActionsType = InferActionsType<typeof Actions>\r\n\r\nexport const Actions = {\r\n\tgetGeolocation: (payload: CoordinateType) =>\r\n\t\t({\r\n\t\t\ttype: GET_GEOLOCATION,\r\n\t\t\tpayload,\r\n\t\t} as const),\r\n\tsetDistanceBetweenPoints: (payload: number) =>\r\n\t\t({\r\n\t\t\ttype: DISPTANCE_BETWEEN_POINTS,\r\n\t\t\tpayload,\r\n\t\t} as const),\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { LocationInfoType } from '../../../../../services/API/API'\r\nimport { Polyline } from 'react-google-maps'\r\nimport { getDistance } from '../../../../lib/getDistance'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Actions as ActionsPoints } from '../../Model/actions'\r\nimport { Actions as ActionsErrors } from './../../../Errors/model/actions'\r\nimport { Codes } from '../../../Errors/codes'\r\n\r\ntype PropsType = {\r\n\tplaces: LocationInfoType[]\r\n\ttravelMode: any\r\n}\r\nexport const MapDirection: React.FC<PropsType> = ({ places, travelMode }) => {\r\n\tconst [coordinate, setCoordinate] = useState<any>()\r\n\r\n\tconst disptach = useDispatch()\r\n\tuseEffect(() => {\r\n\t\tconst waypoints = places.map((p) => ({\r\n\t\t\tlocation: p.geometry.location,\r\n\t\t\tstopover: true,\r\n\t\t}))\r\n\t\tconst origin = waypoints.shift()!.location\r\n\t\tconst destination = waypoints.pop()!.location\r\n\r\n\t\tconst directionsService = new window.google.maps.DirectionsService()\r\n\t\tdirectionsService.route(\r\n\t\t\t{\r\n\t\t\t\torigin: origin,\r\n\t\t\t\tdestination: destination,\r\n\t\t\t\ttravelMode: travelMode,\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\twaypoints: waypoints,\r\n\t\t\t},\r\n\t\t\t(result: any, status: any) => {\r\n\t\t\t\tconsole.log(result)\r\n\t\t\t\t// let dis = 0\r\n\t\t\t\tif (result.status === Codes.OK) {\r\n\t\t\t\t\tlet dis = getDistance(result.routes[0].legs)\r\n\t\t\t\t\tdisptach(ActionsPoints.setDistanceBetweenPoints(dis))\r\n\t\t\t\t\tconst coords = result.routes[0].overview_path\r\n\t\t\t\t\tsetCoordinate(coords)\r\n\t\t\t\t} else if (result.status === Codes.NoRsult)\r\n\t\t\t\t\tdisptach(ActionsErrors.error('The route is broken. Please, refresh the page.'))\r\n\t\t\t}\r\n\t\t)\r\n\t}, [places, travelMode, disptach])\r\n\r\n\treturn (\r\n\t\t<Polyline\r\n\t\t\tpath={coordinate}\r\n\t\t\toptions={{\r\n\t\t\t\tstrokeColor: '#ff2343',\r\n\t\t\t\tstrokeOpacity: 0.8,\r\n\t\t\t\tstrokeWeight: 5,\r\n\t\t\t\tclickable: true,\r\n\t\t\t\tgeodesic: true,\r\n\t\t\t}}\r\n\t\t/>\r\n\t)\r\n}\r\n","type DistanceType = {\r\n\tdistance: { text: string; value: number }\r\n\tduration: { text: string; value: number }\r\n\tend_address: string\r\n\tend_location: { lat: Function; lng: Function }\r\n\tstart_address: string\r\n\tstart_location: { lat: Function; lng: Function }\r\n\tsteps: Array<any>\r\n\ttraffic_speed_entry: Array<any>\r\n\tvia_waypoint: Array<any>\r\n\tvia_waypoints: Array<any>\r\n}\r\n\r\n// type PointsType = {\r\n//     legs:\r\n// }\r\n\r\nexport const getDistance = (points: DistanceType[]) => {\r\n\tlet sumDistance: number\r\n\tsumDistance = 0\r\n\tpoints.forEach((point) => {\r\n\t\tsumDistance += Number(point.distance.value)\r\n\t})\r\n\r\n\treturn Math.ceil(sumDistance / 1000)\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Marker as MarkerMap } from 'react-google-maps'\r\nimport { InfoWindow } from 'react-google-maps'\r\nimport { useDispatch } from 'react-redux'\r\nimport { LocationInfoType } from '../../../../../services/API/API'\r\nimport { getAddressOfPoint } from '../../../PointsManager/Model/thunks'\r\ntype PropsType = {\r\n\tkey: string\r\n\tposition: any\r\n\tmarker: LocationInfoType\r\n\tnumberMarker: number\r\n}\r\nexport const Marker: React.FC<PropsType> = ({\r\n\tposition,\r\n\tmarker,\r\n\tnumberMarker,\r\n\t...props\r\n}) => {\r\n\tconst [isOpen, setIsOpen] = useState(false)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst onDragEnd = (e: google.maps.MouseEvent) => {\r\n\t\tconst lat = e.latLng.lat()\r\n\t\tconst lng = e.latLng.lng()\r\n\t\tconst changedPoint = { lat, lng }\r\n\t\tdispatch(getAddressOfPoint(changedPoint, marker.place_id))\r\n\t}\r\n\r\n\tconst onToggleOpenInfoBox = () => {\r\n\t\tsetIsOpen(!isOpen)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<MarkerMap\r\n\t\t\tposition={position}\r\n\t\t\tonClick={onToggleOpenInfoBox}\r\n\t\t\tdraggable={true}\r\n\t\t\tonDragEnd={onDragEnd}\r\n\t\t\tlabel={{\r\n\t\t\t\ttext: `${numberMarker + 1}`,\r\n\t\t\t\tcolor: 'black',\r\n\t\t\t\tfontSize: '16px',\r\n\t\t\t\tfontWeight: 'bold',\r\n\t\t\t}}\r\n\t\t\t{...props}\r\n\t\t>\r\n\t\t\t{isOpen && (\r\n\t\t\t\t<InfoWindow>\r\n\t\t\t\t\t<div>{marker.formatted_address}</div>\r\n\t\t\t\t</InfoWindow>\r\n\t\t\t)}\r\n\t\t</MarkerMap>\r\n\t)\r\n}\r\n","import { LocationInfoType } from './../../../services/API/API'\r\nexport const getCenterBetweenPoints = (markers: LocationInfoType[]) => {\r\n\tlet lat: number, lng: number\r\n\tlat = lng = 0\r\n\tmarkers.forEach((marker) => {\r\n\t\tlat += marker.geometry.location.lat\r\n\t\tlng += marker.geometry.location.lng\r\n\t})\r\n\r\n\treturn { lat: lat / markers.length, lng: lng / markers.length }\r\n}\r\n","import React from 'react'\r\nimport { withGoogleMap, GoogleMap, withScriptjs } from 'react-google-maps'\r\nimport { withProps, compose } from 'recompose'\r\nimport { API_KEY } from '../../../../services/API/key'\r\nimport { MapDirection } from '../Organims/MapDirection'\r\nimport { Marker } from '../Atoms/Marker'\r\nimport { CoordinateType, LocationInfoType } from '../../../../services/API/API'\r\nimport { getCenterBetweenPoints } from '../../../lib/getCenterBetweenPoints'\r\n\r\ntype PropsType = {\r\n\tgeolocation: CoordinateType\r\n\tcurrentLocation: CoordinateType | undefined\r\n\tmarkers: LocationInfoType[]\r\n}\r\nexport const Map = compose<PropsType, PropsType>(\r\n\twithProps({\r\n\t\tgoogleMapURL: `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&libraries=geometry,drawing,places`,\r\n\t\tloadingElement: <div style={{ height: `100%` }} />,\r\n\t\tcontainerElement: <div style={{ height: '100vh' }} />,\r\n\t\tmapElement: <div style={{ height: `100%` }} />,\r\n\t}),\r\n\twithScriptjs,\r\n\twithGoogleMap\r\n)(({ geolocation, currentLocation, markers }) => (\r\n\t<GoogleMap\r\n\t\tdefaultCenter={geolocation}\r\n\t\tdefaultZoom={10}\r\n\t\tcenter={\r\n\t\t\tmarkers.length < 1\r\n\t\t\t\t? currentLocation || geolocation\r\n\t\t\t\t: getCenterBetweenPoints(markers)\r\n\t\t}\r\n\t\tzoom={markers.length > 1 ? 5 : 10}\r\n\t>\r\n\t\t{markers.map((marker, index) => {\r\n\t\t\tconst position = marker.geometry.location\r\n\t\t\treturn (\r\n\t\t\t\t<Marker\r\n\t\t\t\t\tkey={marker.place_id}\r\n\t\t\t\t\tmarker={marker}\r\n\t\t\t\t\tposition={position}\r\n\t\t\t\t\tnumberMarker={index}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})}\r\n\t\t{markers.length > 1 && (\r\n\t\t\t<MapDirection places={markers} travelMode={window.google.maps.TravelMode.DRIVING} />\r\n\t\t)}\r\n\t</GoogleMap>\r\n))\r\n","import React from 'react'\r\n\r\ntype PropsType = {\r\n\tdistance: number | null\r\n}\r\nexport const Label: React.FC<PropsType> = ({ distance }) => {\r\n\treturn <div className=''>{`${distance} km`}</div>\r\n}\r\n","import React, { useEffect, useCallback } from 'react'\r\nimport { SearchLocation } from '../Features/PointsManager/SearchLocation'\r\nimport { Points } from '../Features/PointsManager/Points/Templates'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Actions as ActionsMap } from '../Features/SimpleMap/Model/actions'\r\nimport { Actions as ActionsError } from './../Features/Errors/model/actions'\r\nimport { CoordinateType } from '../../services/API/API'\r\nimport { AppStateType } from '../Features/Store/store'\r\nimport { getRandomNumber } from './../lib/RandomNumber'\r\nimport { Map } from '../Features/SimpleMap/Templates'\r\nimport { message } from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport './style.sass'\r\nimport { Label } from '../UI/Atoms/Label'\r\n\r\nexport const Page = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst geolocation = useSelector((state: AppStateType) => state.MapReducer.geolocation)\r\n\tconst points = useSelector((state: AppStateType) => state.PointsReducer.points)\r\n\tconst error = useSelector((state: AppStateType) => state.ErrorReducer.error)\r\n\tconst distance = useSelector(\r\n\t\t(state: AppStateType) => state.MapReducer.distanceBetweenPoints\r\n\t)\r\n\tconst currentLocation = useSelector(\r\n\t\t(state: AppStateType) => state.PointsReducer.currentPoint\r\n\t)\r\n\tconst onSetGeoloccation = useCallback(\r\n\t\t(geolocation: CoordinateType) => {\r\n\t\t\tdispatch(ActionsMap.getGeolocation(geolocation))\r\n\t\t},\r\n\t\t[dispatch]\r\n\t)\r\n\tuseEffect(() => {\r\n\t\tconst success = (position: any) => {\r\n\t\t\tlet lat = position.coords.latitude\r\n\t\t\tlet lng = position.coords.longitude\r\n\t\t\tonSetGeoloccation({ lat, lng })\r\n\t\t}\r\n\r\n\t\tconst error = () => {\r\n\t\t\tlet lat = 0\r\n\t\t\tlet lng = getRandomNumber(0, 180)\r\n\t\t\tonSetGeoloccation({ lat, lng })\r\n\t\t}\r\n\r\n\t\tif (!navigator.geolocation) alert('Geolocation is not supported by your browser')\r\n\t\telse navigator.geolocation.getCurrentPosition(success, error)\r\n\t}, [onSetGeoloccation])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (error) {\r\n\t\t\tmessage.error(error)\r\n\t\t\tdispatch(ActionsError.error(''))\r\n\t\t}\r\n\t}, [dispatch, error])\r\n\r\n\treturn (\r\n\t\tgeolocation && (\r\n\t\t\t<div className='page_points-map'>\r\n\t\t\t\t<div className='points'>\r\n\t\t\t\t\t<div className='add-point'>\r\n\t\t\t\t\t\t<SearchLocation />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='label-distance'>\r\n\t\t\t\t\t\t{distance && <Label distance={distance} />}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='list-point'>\r\n\t\t\t\t\t\t<Points />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='map'>\r\n\t\t\t\t\t<Map\r\n\t\t\t\t\t\tmarkers={points}\r\n\t\t\t\t\t\tcurrentLocation={currentLocation?.geometry.location}\r\n\t\t\t\t\t\tgeolocation={geolocation}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t)\r\n}\r\n","export const  getRandomNumber = (min: number, max: number) => {\r\n  return Math.random() * (max - min) + min \r\n}","import React from 'react'\r\nimport './App.sass'\r\nimport { Page } from './Components/Pages/Page'\r\n\r\nexport function App() {\r\n\treturn <Page />\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_GEOLOCATION, DISPTANCE_BETWEEN_POINTS } from './actions'\r\nimport { ActionsType } from './actions'\r\nimport { CoordinateType } from './../../../../services/API/API'\r\n\r\nlet initialState = {\r\n\tgeolocation: null as CoordinateType | null,\r\n\tdistanceBetweenPoints: null as number | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const Reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase GET_GEOLOCATION:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgeolocation: action.payload,\r\n\t\t\t}\r\n\t\tcase DISPTANCE_BETWEEN_POINTS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdistanceBetweenPoints: action.payload,\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n","import { ADD_POINT, DELETE_POINT, MOVED_POINTS, CHANGED_POSITION_POINTS } from './actions'\r\nimport { ActionsType } from './actions'\r\nimport { LocationInfoType } from '../../../../services/API/API'\r\n\r\nlet initialState = {\r\n\tpoints: [] as LocationInfoType[],\r\n\tcurrentPoint: null as LocationInfoType | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const Reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase ADD_POINT:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpoints: [...state.points, action.payload],\r\n\t\t\t\tcurrentPoint: action.payload,\r\n\t\t\t}\r\n\t\tcase DELETE_POINT:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpoints: [...state.points.filter((point) => point.place_id !== action.payload)],\r\n\t\t\t}\r\n\t\tcase MOVED_POINTS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpoints: action.payload,\r\n\t\t\t}\r\n\t\tcase CHANGED_POSITION_POINTS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpoints: [\r\n\t\t\t\t\t...state.points.map((item) => {\r\n\t\t\t\t\t\tif (item.place_id === action.id) return action.payload\r\n\t\t\t\t\t\telse return item\r\n\t\t\t\t\t}),\r\n\t\t\t\t],\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n","import { ERROR } from './actions'\r\nimport { ActionsType } from './actions'\r\n\r\nlet initialState = {\r\n\terror: null as string | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const Reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase ERROR:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terror: action.payload,\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n","import { combineReducers, createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { Reducer as ReducerMap } from '../SimpleMap/Model/reducer'\r\nimport { Reducer as ReducerPoints } from '../PointsManager/Model/reducer'\r\nimport { Reducer as ReducerError } from '../Errors/model/reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\tPointsReducer: ReducerPoints,\r\n\tMapReducer: ReducerMap,\r\n\tErrorReducer: ReducerError,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './global.sass'\nimport { App } from './App'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport { store } from './Components/Features/Store/store'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}